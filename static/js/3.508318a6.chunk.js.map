{"version":3,"sources":["views/Search/Slider/index.js","views/Search/CategoriesGrid/index.js","views/Search/index.js"],"names":["Slider","slides","slideTo","direction","sliderTrack","document","querySelector","sliderTrackWidth","scrollWidth","scrollBy","updateSliderButtonsVisibility","btnRight","btnLeft","maxScroll","currentScrollPosition","scrollLeft","offsetWidth","style","visibility","useEffect","window","addEventListener","removeEventListener","className","onClick","icon","faChevronLeft","color","map","slide","src","icons","url","onError","e","target","onerror","defaultCover","alt","name","id","faChevronRight","GenresGrid","categories","normalizeName","includes","str1","str2","split","category","background","generateGradient","generateRandomColor","Search","topCategories","useStore","title","CategoriesGrid"],"mappings":"0QAoFeA,MA9EA,EAAGC,aAChB,SAASC,EAAQC,GACf,MAAMC,EAAcC,SAASC,cAAc,iBACrCC,EAAmBH,EAAYI,YAEnB,UAAdL,EACFC,EAAYK,SAASF,EAAmB,EAAG,GAE3CH,EAAYK,UAAWF,EAAmB,EAAI,GAIlD,SAASG,IACP,MAAMN,EAAcC,SAASC,cAAc,iBACrCK,EAAWN,SAASC,cAAc,cAClCM,EAAUP,SAASC,cAAc,aAGjCO,EAAYT,EAAYI,YACxBM,EAAwBV,EAAYW,WACpCR,EAAmBH,EAAYY,YAGnCL,EAASM,MAAMC,WADbX,EAAmBO,GAAyBD,EAClB,SAEA,UAI5BD,EAAQK,MAAMC,WADZJ,GAXc,EAYW,SAEA,UAiB/B,OAbAK,qBAAU,KACR,MAAMf,EAAcC,SAASC,cAAc,iBAM3C,OALAI,IAEAU,OAAOC,iBAAiB,SAAUX,GAClCN,EAAYiB,iBAAiB,SAAUX,GAEhC,KACLU,OAAOE,oBAAoB,SAAUZ,GACrCN,EAAYkB,oBAAoB,SAAUZ,MAE3C,IAGD,sBAAKa,UAAU,mBAAf,UACE,wBAAQA,UAAU,yBAAyBC,QAAS,IAAMtB,EAAQ,QAAlE,SACE,cAAC,IAAD,CAAiBuB,KAAMC,IAAeC,MAAO,WAG/C,oBAAIJ,UAAU,eAAd,SACGtB,EAAO2B,KAAKC,IAAD,aACV,qBAAIN,UAAU,QAAd,UACE,qBACEA,UAAU,iBACVO,KAAU,OAALD,QAAK,IAALA,GAAA,UAAAA,EAAOE,MAAM,UAAb,eAAiBC,MAAO,GAC7BC,QAAUC,IACRA,EAAEC,OAAOC,QAAU,KACnBF,EAAEC,OAAOL,IAAMO,KAEjBC,IAAM,GAAET,EAAMU,eAEhB,sBAAMhB,UAAU,aAAhB,SAA8BM,EAAMU,SAVXV,EAAMW,SAerC,wBAAQjB,UAAU,0BAA0BC,QAAS,IAAMtB,EAAQ,SAAnE,SACE,cAAC,IAAD,CAAiBuB,KAAMgB,IAAgBd,MAAO,e,gBClDvCe,MAvBI,EAAGC,iBACpB,SAASC,EAAcL,GACrB,IAAKA,EAAKM,SAAS,KAAM,OAAON,EAEhC,MAAOO,EAAMC,GAAQR,EAAKS,MAAM,KAChC,OAAOF,EAAO,MAAQC,EAGxB,OACE,oBAAIxB,UAAU,0BAAd,SACGoB,EAAWf,KAAKqB,GACf,oBACE1B,UAAU,YAEVN,MAAO,CAAEiC,WAAYC,YAAiBC,gBAHxC,SAKE,sBAAM7B,UAAU,YAAhB,SAA6BqB,EAAcK,EAASV,SAH/CU,EAAST,SCQTa,UAlBA,KACb,MAAM,WAAEV,EAAF,cAAcW,GAAkBC,cAEtC,OACE,sBAAKhC,UAAU,mBAAf,UACE,0BAASA,UAAU,UAAnB,UACE,cAAC,IAAD,CAAeiC,MAAM,eACrB,cAAC,EAAD,CAAQvD,OAAQqD,OAGlB,0BAAS/B,UAAU,UAAnB,UACE,cAAC,IAAD,CAAeiC,MAAM,eACrB,cAACC,EAAD,CAAgBd,WAAYA","file":"static/js/3.508318a6.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./styles.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faChevronLeft, faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\r\nimport defaultCover from \"@/assets/default-cover.webp\";\r\n\r\nconst Slider = ({ slides }) => {\r\n  function slideTo(direction) {\r\n    const sliderTrack = document.querySelector(\".slider-track\");\r\n    const sliderTrackWidth = sliderTrack.scrollWidth;\r\n\r\n    if (direction === \"right\") {\r\n      sliderTrack.scrollBy(sliderTrackWidth / 4, 0);\r\n    } else {\r\n      sliderTrack.scrollBy(-(sliderTrackWidth / 4), 0);\r\n    }\r\n  }\r\n\r\n  function updateSliderButtonsVisibility() {\r\n    const sliderTrack = document.querySelector(\".slider-track\");\r\n    const btnRight = document.querySelector(\".btn-right\");\r\n    const btnLeft = document.querySelector(\".btn-left\");\r\n\r\n    const minScroll = 0;\r\n    const maxScroll = sliderTrack.scrollWidth;\r\n    const currentScrollPosition = sliderTrack.scrollLeft;\r\n    const sliderTrackWidth = sliderTrack.offsetWidth;\r\n\r\n    if (sliderTrackWidth + currentScrollPosition >= maxScroll) {\r\n      btnRight.style.visibility = \"hidden\";\r\n    } else {\r\n      btnRight.style.visibility = \"visible\";\r\n    }\r\n\r\n    if (currentScrollPosition <= minScroll) {\r\n      btnLeft.style.visibility = \"hidden\";\r\n    } else {\r\n      btnLeft.style.visibility = \"visible\";\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const sliderTrack = document.querySelector(\".slider-track\");\r\n    updateSliderButtonsVisibility();\r\n\r\n    window.addEventListener(\"resize\", updateSliderButtonsVisibility);\r\n    sliderTrack.addEventListener(\"scroll\", updateSliderButtonsVisibility);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", updateSliderButtonsVisibility);\r\n      sliderTrack.removeEventListener(\"scroll\", updateSliderButtonsVisibility);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"slider-container\">\r\n      <button className=\"btn-direction btn-left\" onClick={() => slideTo(\"left\")}>\r\n        <FontAwesomeIcon icon={faChevronLeft} color={\"#000\"} />\r\n      </button>\r\n\r\n      <ul className=\"slider-track\">\r\n        {slides.map((slide) => (\r\n          <li className=\"slide\" key={slide.id}>\r\n            <img\r\n              className=\"background-img\"\r\n              src={slide?.icons[0]?.url || \"\"}\r\n              onError={(e) => {\r\n                e.target.onerror = null;\r\n                e.target.src = defaultCover;\r\n              }}\r\n              alt={`${slide.name} cover`}\r\n            />\r\n            <span className=\"slide-text\">{slide.name}</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <button className=\"btn-direction btn-right\" onClick={() => slideTo(\"right\")}>\r\n        <FontAwesomeIcon icon={faChevronRight} color={\"#000\"} />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n","import React from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nimport { generateRandomColor, generateGradient } from \"../../../common/utils\";\r\n\r\nconst GenresGrid = ({ categories }) => {\r\n  function normalizeName(name) {\r\n    if (!name.includes(\"/\")) return name;\r\n\r\n    const [str1, str2] = name.split(\"/\");\r\n    return str1 + \"/\\n\" + str2;\r\n  }\r\n\r\n  return (\r\n    <ul className=\"category-grid-container\">\r\n      {categories.map((category) => (\r\n        <li\r\n          className=\"grid-item\"\r\n          key={category.id}\r\n          style={{ background: generateGradient(generateRandomColor()) }}\r\n        >\r\n          <span className=\"grid-text\">{normalizeName(category.name)}</span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default GenresGrid;\r\n","import React from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nimport { useStore } from \"@/store\";\r\nimport { SectionHeader } from \"@/components/ui\";\r\nimport Slider from \"./Slider\";\r\nimport CategoriesGrid from \"./CategoriesGrid\";\r\n\r\nconst Search = () => {\r\n  const { categories, topCategories } = useStore();\r\n\r\n  return (\r\n    <div className=\"search-container\">\r\n      <section className=\"section\">\r\n        <SectionHeader title=\"Top genres\" />\r\n        <Slider slides={topCategories} />\r\n      </section>\r\n\r\n      <section className=\"section\">\r\n        <SectionHeader title=\"Browse all\" />\r\n        <CategoriesGrid categories={categories} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"],"sourceRoot":""}